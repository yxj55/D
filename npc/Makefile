# 工具设置
VERILATOR = verilator
CXX = g++
MAKE = make

WORK_DIR = $(shell pwd)
BUILD_DIR = $(WORK_DIR)/build
INC_PATH := $(wildcard $(WORK_DIR)/csrc/include/ $(WORK_DIR)/csrc/include/**/ $(WORK_DIR)/include/ $(WORK_DIR)/include/**/ )
INCFLAGS := $(addprefix -I, $(INC_PATH))

DIFF_REF_PATH = $(NEMU_HOME)/build
DIFF_REF_SO = $(DIFF_REF_PATH)/riscv32-nemu-interpreter-so

#打印变量
#$(info INCFLAGS have : $(INCFLAGS))

# Verilator 编译选项
VERILATOR_FLAGS += --cc --exe --build
VERILATOR_FLAGS += -CFLAGS "$(INCFLAGS)"
VERILATOR_FLAGS += -LDFLAGS "-lreadline -lhistory -lrt"
VERILATOR_FLAGS += -Wno-lint -Wno-style --x-assign unique
VERILATOR_FLAGS += --Mdir $(BUILD_DIR) \
                   --build \
                   -CFLAGS "$(INCFLAGS)"
VERILATOR_FLAGS += -O3 --x-assign fast --x-initial fast --noassert
VERILATOR_FLAGS += --trace  # 可选：生成波形支持

# 源文件设置
VSRC_DIR = vsrc
CSRC_DIR = csrc
TOP_MODULE = ysyx_25030093_top  # 修改为你的顶层模块名

# 自动查找所有 Verilog 文件
VSOURCES = $(shell find $(VSRC_DIR) -name "*.v")
CSRCS = $(wildcard $(WORK_DIR)/csrc/src/*.c $(WORK_DIR)/csrc/src/**/*.c $(WORK_DIR)/csrc/*.cpp $(WORK_DIR)/csrc/src/**/**/*.c )

#$(info CSRCS : $(CSRCS))

# Include variables and rules generated by menuconfig
-include $(NPC_HOME)/include/config/auto.conf
-include $(NPC_HOME)/include/config/auto.conf.cmd

# 生成目标设置
OBJ_DIR = build
EXE = $(OBJ_DIR)/V$(TOP_MODULE)

IMG ?=
#$(info IMG =$(IMG))

IMGELF = -f $(addsuffix .elf, $(basename $(IMG)))
$(info IMGELF =$(IMGELF))
#ftrace
#ARGS += $(IMGELF) 
ARGS += -d $(DIFF_REF_SO)

#ARGS += -b
ARGS += $(IMG)
$(info ARGS = $(ARGS))

# 默认目标
all: compile run verilator

# Include rules for menuconfig
include $(NPC_HOME)/scripts/config.mk


verilator:$(VSOURCES) $(CSRCS)
	@echo "Verilating $(VSOURCES)..."
	$(VERILATOR) $(VERILATOR_FLAGS) \
		--top-module $(TOP_MODULE) \
		$(VSOURCES) $(CSRCS) $(INCFLAGS)

# 编译仿真程序
run:verilator 
	@echo "making"
	make -C build -f Vysyx_25030093_top.mk Vysyx_25030093_top
	@echo "Running simulation..."
	./build/Vysyx_25030093_top $(ARGS)

gtkwave:
	gtkwave dump.vcd
# 清理生成文件
clean:
	rm -rf $(OBJ_DIR) 
	rm -f *.vcd

.PHONY: all compile run wave clean
